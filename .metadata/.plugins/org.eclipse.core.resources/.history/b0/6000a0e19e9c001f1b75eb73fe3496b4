package project_hotel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public class RoomCheckBooking extends JFrame {
    private JTextArea textArea;
    private JPanel buttonPanel;
    private RoomDAO roomDAO;
    public String customerId;
    public static ReserveDAO reserveDAO;
    
    // 객실 확인 및 예약
    public RoomCheckBooking(String customerId) {
        super("객실 예약");
        reserveDAO = ReserveDAOImple.getInstance();
        this.customerId = customerId;
        roomDAO = new RoomDAOImple();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(600, 500);
        setLayout(new BorderLayout());

        textArea = new JTextArea();
        textArea.setEditable(false);
        add(new JScrollPane(textArea), BorderLayout.CENTER);
        textArea.setText("\n객실 구성 : 각 층별로 6개씩 구성 \n홀수 객실은 싱글룸 짝수 객실은 더블룸\n2층은 스탠다드 3층은 슈페리어, 4층은 디럭스\n객실 종류 : 싱글룸 / 더블룸 \n객실 등급: 스탠다드 / 슈페리어 / 디럭스 \n객실 요금 : 스탠다드 싱글(80,000원) / 스탠다드 더블(100,000원)\n객실 등급 업그레이드 시(슈페리어 +20000원, 디럭스 +40000원)\n\n각 객실에 대한 자세한 정보 및 예약은 아래 객실 번호를 클릭해 확인해주세요.");
        textArea.setFont(new Font("굴림", Font.PLAIN, 16));

        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(6, 3, 10, 10));

        loadRoomButtons();

        add(buttonPanel, BorderLayout.SOUTH);
        setVisible(true);
    }

    private void loadRoomButtons() {
        ArrayList<RoomVO> rooms = roomDAO.loadRooms();
        for (RoomVO room : rooms) {
            JButton roomButton = new JButton("객실 " + room.getRoomId());
            roomButton.setFont(new Font("굴림", Font.PLAIN, 14));

            roomButton.addActionListener(new RoomButtonListener(room));
            buttonPanel.add(roomButton);
        }
    }

    private class RoomButtonListener implements ActionListener {
        private RoomVO room;

        public RoomButtonListener(RoomVO room) {
            this.room = room;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            new RoomDetailsDialog(RoomCheckBooking.this, room);
        }
    }

    private class RoomDetailsDialog extends JDialog {
        private JComboBox<String> checkInDateBox;
        private JComboBox<String> checkOutDateBox;
        private final double roomPrice; 
        private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        public RoomDetailsDialog(JFrame parent, RoomVO room) {
            super(parent, "객실 상세 정보", true);
            setLayout(new BorderLayout());
            setSize(300, 300);
            setLocationRelativeTo(parent);

            this.roomPrice = room.getRoomPrice();

            JTextArea detailsArea = new JTextArea();
            detailsArea.setEditable(false);
            detailsArea.setFont(new Font("굴림", Font.PLAIN, 14));
            detailsArea.setText("객실 번호: " + room.getRoomId() + "\n" +
                                "객실 타입: " + room.getRoomType() + "\n" +
                                "객실 가격: " + roomPrice + "원\n" +
                                "예약 상태: " + room.getRoomAvailability());
            add(new JScrollPane(detailsArea), BorderLayout.CENTER);

            JPanel datePanel = new JPanel();
            datePanel.setLayout(new GridLayout(2, 2));
            
            datePanel.add(new JLabel("체크인 날짜:"));
            checkInDateBox = new JComboBox<>(generateCheckInDateOptions());
            datePanel.add(checkInDateBox);
            
            datePanel.add(new JLabel("체크아웃 날짜:"));
            checkOutDateBox = new JComboBox<>(generateCheckOutDateOptions());
            datePanel.add(checkOutDateBox);

            add(datePanel, BorderLayout.NORTH);

            JButton reserveButton = new JButton("예약하기");
            reserveButton.addActionListener(e -> {
                if ("예약됨".equals(room.getRoomAvailability())) {
                    JOptionPane.showMessageDialog(this, "이 객실은 이미 예약되었습니다.", "예약 실패", JOptionPane.WARNING_MESSAGE);
                } else {
                    String checkInDate = (String) checkInDateBox.getSelectedItem();
                    String checkOutDate = (String) checkOutDateBox.getSelectedItem();
                    int roomId = room.getRoomId();
 
                    double price = calculatePrice(checkInDate, checkOutDate);
                    
                    int confirm = JOptionPane.showConfirmDialog(this,
                            "해당 날짜에 객실을 예약하시겠습니까?\n체크인: " + checkInDate + "\n체크아웃: " + checkOutDate + "\n총 가격: " + price + "원",
                            "예약 확인", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (confirm == JOptionPane.YES_OPTION) {
                        
                        roomDAO.updateRoomAvailability(room.getRoomId(), "예약됨");
                        room.setRoomAvailability("예약됨"); 
                        
                        
                        JOptionPane.showMessageDialog(this, room.getRoomId() + " 객실이 예약되었습니다.", "예약 성공", JOptionPane.INFORMATION_MESSAGE);
                        detailsArea.setText("객실 번호: " + room.getRoomId() + "\n" +
                                            "객실 타입: " + room.getRoomType() + "\n" +
                                            "객실 가격: " + roomPrice + "원\n" +
                                            "예약 상태: 예약됨");
                        
            			ReserveVO rsvo = new ReserveVO(0, checkInDate, checkOutDate, customerId, roomId, price);
            			reserveDAO.reserve(rsvo);
                        reserveButton.setEnabled(false); 
                    }
                }
            });

            
            if ("예약됨".equals(room.getRoomAvailability())) {
                reserveButton.setEnabled(false);
            }

            add(reserveButton, BorderLayout.SOUTH);
            setVisible(true);
        }

        
        private String[] generateCheckInDateOptions() {
            String[] dates = new String[1]; 
            dates[0] = dateFormat.format(Calendar.getInstance().getTime());
            return dates;
        }

        private String[] generateCheckOutDateOptions() {
            String[] dates = new String[7];
            Calendar calendar = Calendar.getInstance();
            for (int i = 0; i < 7; i++) {
                calendar.add(Calendar.DAY_OF_MONTH, 1);
                dates[i] = dateFormat.format(calendar.getTime());
            }
            return dates;
        }

        private double calculatePrice(String checkInDate, String checkOutDate) {
            try {
                Calendar checkIn = Calendar.getInstance();
                Calendar checkOut = Calendar.getInstance();
                checkIn.setTime(dateFormat.parse(checkInDate));
                checkOut.setTime(dateFormat.parse(checkOutDate));

                long diff = checkOut.getTimeInMillis() - checkIn.getTimeInMillis();
                long daysBetween = diff / (1000 * 60 * 60 * 24); 

                return daysBetween * roomPrice; 
            } catch (Exception e) {
                e.printStackTrace();
                return 0; 
            }
        }
    }
}